/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext, queryKeyFn } from "./apiContext";
import { deepMerge } from "./apiUtils";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

type QueryFnOptions = {
  signal?: AbortController["signal"];
};

export type QueryFestivalsError = Fetcher.ErrorWrapper<undefined>;

export type QueryFestivalsVariables = ApiContext["fetcherOptions"];

/**
 * An endpoint to fetch all metal festivals.
 */
export const fetchQueryFestivals = (
  variables: QueryFestivalsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FestivalsResponseType,
    QueryFestivalsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/v1/festivals", method: "get", ...variables, signal });

/**
 * An endpoint to fetch all metal festivals.
 */
export function queryFestivalsQuery(variables: QueryFestivalsVariables): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<Schemas.FestivalsResponseType>;
};

export function queryFestivalsQuery(
  variables: QueryFestivalsVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn:
    | ((options: QueryFnOptions) => Promise<Schemas.FestivalsResponseType>)
    | reactQuery.SkipToken;
};

export function queryFestivalsQuery(
  variables: QueryFestivalsVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/v1/festivals",
      operationId: "queryFestivals",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchQueryFestivals(variables, signal),
  };
}

/**
 * An endpoint to fetch all metal festivals.
 */
export const useSuspenseQueryFestivals = <
  TData = Schemas.FestivalsResponseType,
>(
  variables: QueryFestivalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.FestivalsResponseType,
      QueryFestivalsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApiContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.FestivalsResponseType,
    QueryFestivalsError,
    TData
  >({
    ...queryFestivalsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

/**
 * An endpoint to fetch all metal festivals.
 */
export const useQueryFestivals = <TData = Schemas.FestivalsResponseType,>(
  variables: QueryFestivalsVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.FestivalsResponseType,
      QueryFestivalsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.FestivalsResponseType,
    QueryFestivalsError,
    TData
  >({
    ...queryFestivalsQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: "/v1/festivals";
  operationId: "queryFestivals";
  variables: QueryFestivalsVariables | reactQuery.SkipToken;
};
